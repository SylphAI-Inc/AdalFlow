[tool.poetry]
name = "adalflow"
version = "1.1.0"
description = "The Library to Build and Auto-optimize LLM Applications"
authors = ["Li Yin <li@sylphai.com>"]
readme = "README.md"
repository = "https://github.com/SylphAI-Inc/AdalFlow"
license = "MIT"
maintainers = ["Li Yin <li@sylphai.com>"]
classifiers = [
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
keywords = ["LLM", "NLP", "RAG", "devtools", "retrieval", "agent"]

include = [
    "adalflow/core/*",
    "adalflow/components/*",
    "adalflow/eval/*",
    "adalflow/datasets/*",
    "adalflow/utils/*",
    "adalflow/tracing/*",
    "adalflow/optim/*",
    "adalflow/apps/*",
]

packages = [{ include = "adalflow", from = "." }]

[tool.poetry.dependencies]
python = ">=3.9, <4.0"
python-dotenv = "^1.0.1"
backoff = "^2.2.1"
jinja2 = "^3.1.3"
jsonlines = "^4.0.0"
tiktoken = ">=0.3.3"
numpy = [
    { version = "<2.1.0", markers = "python_version < '3.10'" },
    { version = "*", markers = "python_version >= '3.10'" },
]
tqdm = "^4.66.4"
PyYAML = ">=6.0.1"
nest-asyncio = "^1.6.0"
colorama = "^0.4.6"
diskcache = "^5.6.3"

# Optional dependencies for the library:
openai = { version = ">=1.97.1", optional = true }
groq = { version = ">=0.9.0", optional = true }
faiss-cpu = { version = ">=1.8.0", optional = true }
sqlalchemy = { version = ">=2.0.30", optional = true }
pgvector = { version = ">=0.3.1", optional = true }
torch = { version = ">=2.3.1", optional = true }
anthropic = { version = ">=0.55.0", optional = true }
google-generativeai = { version = ">=0.7.2", optional = true }
cohere = { version = ">=5.5.8", optional = true }
ollama = { version = ">=0.2.1", optional = true }
lancedb = { version = ">=0.5.2", optional = true }
azure-core = { version = ">=1.24.0", optional = true }
azure-identity = { version = ">=1.12.0", optional = true }
together = { version = ">=1.3.14", optional = true }
boto3 = { version = "^1.35.19", optional = true }
mcp = { version = "^1.9.4", optional = true, markers = "python_version >= '3.10'" }
pytest-asyncio = "^1.0.0"
asyncstdlib = "^3.13.1"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
pytest-mock = "^3.14.0"
torch = "^2.3.1"
ollama = "^0.2.1"
faiss-cpu = "^1.8.0"
openai = "^1.97.1"
groq = "^0.9.0"
google-generativeai = "^0.7.2"
anthropic = "^0.55.0"
lancedb = "^0.5.2"
boto3 = "^1.35.19"
pydantic = ">=2.10.0,<2.11.0"
mcp = { version = "^1.9.4", markers = "python_version >= '3.10'" }
pytest-asyncio = "^1.0.0"

[tool.poetry.group.qdrant.dependencies]
# Group dependencies are inherently optional, so `optional = true` isn't strictly needed
qdrant-client = { version = ">=1.12.2,<2.0.0", markers = "python_version >= '3.10'" }

[tool.poetry.group.typing.dependencies]
mypy = "^1"
types-pyyaml = "^6.0.12.20240311"
types-tqdm = "^4.66.0.20240417"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.0"
graphviz = "^0.20.3"
tensorboard = "^2.17.0"
tensorboardx = "^2.6.2.2"
matplotlib = "^3.9.1"
azure-identity = "^1.18.0"
azure-core = "^1.31.0"
pyvis = "^0.3.2"
uvicorn = "^0.35.0"
fastapi = "^0.116.1"

[tool.poetry.group.extra.dependencies]
datasets = "^2.21.0"

[tool.poetry.extras]
# Extras for pip install e.g. `pip install adalflow[openai, groq]`
openai = ["openai"]
groq = ["groq"]
anthropic = ["anthropic"]
cohere = ["cohere"]
google-generativeai = ["google-generativeai"]
ollama = ["ollama"]
azure = ["azure-core", "azure-identity"]
bedrock = ["boto3"]
together = ["together"]
mistralai = ["mistralai"]
fireworks-ai = ["fireworks-ai"]
lancedb = ["lancedb"]
pgvector = ["pgvector"]
# Removed "qdrant" extra to avoid confusion, now part of the qdrant group
datasets = ["datasets"]
faiss-cpu = ["faiss-cpu"]
torch = ["torch"]
sqlalchemy = ["sqlalchemy"]
mcp = ["mcp"]

[[tool.poetry.source]]
name = "nvidia-pypi"
priority = "supplemental"
url = "https://pypi.nvidia.com"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py311"]

[tool.ruff]
exclude = ["images"]
lint.extend-ignore = [
    "E402",  # Ignore module-level import issues
    "E731",
    "UP007", # Disable warning for Union types formatting in Python 3.8
]
